using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Threading.Tasks;
using System.Net;
using System.Web;
using System.Web.Mvc;
using FormsCollectionProj.DAL;
using System.IO;
using System.Web.Security;
using OfficeOpenXml;
using System.Configuration;  


namespace FormsCollectionProj.Controllers
{
    public class FormsController : Controller
    {
        private CandidateEntities db = new CandidateEntities();

        //======================Multiple checkbox code Start=============================
        // GET: Forms
        public async Task<ActionResult> Index()
        {
            return View(await db.registrations.ToListAsync());
        }

        [HttpPost]
        public ActionResult Index(FormCollection formCollection)
        {
            string[] ids = formCollection["ID"].Split(new char[] { ',' });
            foreach (string id in ids)
            {
                var employee = this.db.registrations.Find(int.Parse(id));
                this.db.registrations.Remove(employee);
                this.db.SaveChanges();
            }
            return RedirectToAction("Index");
        }  
        //======================Multiple checkbox code end=============================

        
        //================================================================
        // GET: Forms/Details/5
        public async Task<ActionResult> Details(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            registration registration = await db.registrations.FindAsync(id);
            if (registration == null)
            {
                return HttpNotFound();
            }
            return View(registration);
        }

        // GET: Forms/Create
        public ActionResult Create()
        {
            ViewBag.CountryList = new SelectList(Getcountry(), "CountryId", "County");
            return View();
        }

        // POST: Forms/Create
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> Create(string CountryId,string StateId,string CityId,HttpPostedFileBase file,[Bind(Include = "r_id,r_name,r_fname,r_uname,r_email,r_pass,r_qualification,r_gender,r_img,r_details,r_UserType,r_first,r_second,r_third,r_fourth,r_country,r_state,r_city,r_fees,r_createdate,r_LastLogin,r_DateOfBirth,r_NewsLetter,r_IsActive,r_ActivationCode")] registration registration)
        {
            if (ModelState.IsValid)
            {
                var cou = CountryId;
                var sat = StateId;
                var cit = CityId;
                //===================Image Code====================================
                if (file != null)
                {
                    string ImageName = Path.GetFileName(file.FileName);
                    string randomFileName = Path.GetFileNameWithoutExtension(ImageName) +
                                        "_" + Guid.NewGuid().ToString().Substring(0, 4)
                                            + Path.GetExtension(ImageName);
                    string physicalPath = Server.MapPath("~/Images/");
                    string fullpath = Path.Combine(physicalPath, randomFileName);
                    file.SaveAs(fullpath);
                    registration.r_img = randomFileName;
                    registration.r_country = Convert.ToInt32(cou);
                    registration.r_state = Convert.ToInt32(sat);
                    registration.r_city = Convert.ToInt32(cit);
                    TempData["loguser"] = registration.r_email;// email ko hum as mobile number use krenge

                    registration.r_IsActive = true;
                    registration.r_createdate = DateTime.Now; 
                    FormsAuthentication.SetAuthCookie(registration.r_email, false);
                    db.registrations.Add(registration);
                    await db.SaveChangesAsync();
                }
               
                return RedirectToAction("Index");
            }

            return View(registration);
        }
        //=============================Method===================================================================
        public List<SelectCountry> Getcountry()
        {
            List<SelectCountry> Coutries = db.SelectCountries.ToList();
            return Coutries;
        }

        public ActionResult GetState(int CountryID)
        {
            List<SelectCountrySelectState> States = db.SelectCountrySelectStates.Where(x => x.CountryId == CountryID).ToList();

            ViewBag.StateList = new SelectList(States, "StateId", "State");
            return PartialView("_state");
        }
        public ActionResult GetCity(int StateID)
        {
            List<SelectCity> Cities = db.SelectCities.Where(x => x.StateId == StateID).ToList();

            ViewBag.CityList = new SelectList(Cities, "CityId", "City");
            return PartialView("_City");
        }

        //=============================Method===================================================================
        // GET: Forms/Edit/5
        public async Task<ActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            registration registration = await db.registrations.FindAsync(id);
            if (registration == null)
            {
                return HttpNotFound();
            }
            return View(registration);
        }

        // POST: Forms/Edit/5
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> Edit([Bind(Include = "r_id,r_name,r_fname,r_uname,r_email,r_pass,r_qualification,r_gender,r_img,r_details,r_UserType,r_first,r_second,r_third,r_fourth,r_country,r_state,r_city,r_fees,r_createdate,r_LastLogin,r_DateOfBirth,r_NewsLetter,r_IsActive,r_ActivationCode")] registration registration)
        {
            if (ModelState.IsValid)
            {

                db.Entry(registration).State = EntityState.Modified;
                await db.SaveChangesAsync();
                return RedirectToAction("Index");
            }
            return View(registration);
        }

        // GET: Forms/Delete/5
        public async Task<ActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            registration registration = await db.registrations.FindAsync(id);
            if (registration == null)
            {
                return HttpNotFound();
            }
            return View(registration);
        }

        // POST: Forms/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<ActionResult> DeleteConfirmed(int id)
        {
            registration registration = await db.registrations.FindAsync(id);
            db.registrations.Remove(registration);
            await db.SaveChangesAsync();
            return RedirectToAction("Index");
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}
